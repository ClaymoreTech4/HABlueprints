blueprint:
  name: Team Score Management
  description: >
    Manages team score updates, detects scoring events, and updates scores for
    active games dynamically. Allows adding additional actions after each condition.
  domain: automation
  input:
    team_sensor:
      name: Team Sensor
      description: >
        The sensor entity tracking the team's state and score (e.g., sensor.lions_football).
      selector:
        entity:
          integration: teamtracker
          multiple: false
    score_input_text:
      name: Score Input Text
      description: >
        The input_text entity for displaying the type of score (e.g., Touchdown, Extra Point). This can be used for conditions on the conditional card to change your dashboard.
      selector:
        entity:
          domain: input_text
    game_start_actions:
      name: Game Starts Actions
      description: >
        A sequence of actions to perform after the game starts.
      default: []
      selector:
        action: {}
    scored_actions:
      name: Any Score Actions
      description: >
        A sequence of actions to perform after any score.
      default: []
      selector:
        action: {}
    touchdown_actions:
      name: Touchdown Actions
      description: >
        A sequence of actions to perform after a touchdown.
      default: []
      selector:
        action: {}
    extra_point_actions:
      name: Extra Point Actions
      description: >
        A sequence of actions to perform after an extra point.
      default: []
      selector:
        action: {}
    safety_2_point_conversion_actions:
      name: Safety or 2 Point Conversion Actions
      description: >
        A sequence of actions to perform after a safety or 2-point conversion.
      default: []
      selector:
        action: {}
    field_goal_actions:
      name: Field Goal Actions
      description: >
        A sequence of actions to perform after a field goal.
      default: []
      selector:
        action: {}

trigger:
  - platform: state
    entity_id: !input team_sensor

condition:
  - condition: state
    entity_id: !input team_sensor
    state: "IN"
action:
  - parallel:
      # Handle Game Start
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ trigger.to_state.state == "IN" and trigger.from_state.state == "PRE" }}
            sequence:
              - sequence: !input game_start_actions
              - action: input_text.set_value
                data:
                  value: Game Starting
                target:
                  entity_id: !input score_input_text
              - delay: "00:00:30"
              - action: input_text.set_value
                target:
                  entity_id: !input score_input_text
                data:
                  value: None
    # Handle each football scoring case in a choose statement
      - choose:
          - conditions:
              - condition: template
                value_template: '{{ trigger.to_state.attributes.sport == "football" and (trigger.to_state.attributes.team_score | int - trigger.from_state.attributes.team_score | int == 1) }}'
            sequence:
              - sequence: !input extra_point_actions
              - action: input_text.set_value
                data:
                  value: Extra Point
                target:
                  entity_id: !input score_input_text
              - delay: "00:00:30"
              - action: input_text.set_value
                target:
                  entity_id: !input score_input_text
                data:
                  value: None
          - conditions:
              - condition: template
                value_template: '{{ trigger.to_state.attributes.sport == "football" and (trigger.to_state.attributes.team_score | int - trigger.from_state.attributes.team_score | int == 6) }}'
            sequence:
              - sequence: !input touchdown_actions
              - action: input_text.set_value
                data:
                  value: Touchdown
                target:
                  entity_id: !input score_input_text
              - delay: "00:00:30"
              - action: input_text.set_value
                target:
                  entity_id: !input score_input_text
                data:
                  value: None
          - conditions:
              - condition: template
                value_template: '{{ trigger.to_state.attributes.sport == "football" and (trigger.to_state.attributes.team_score | int - trigger.from_state.attributes.team_score | int == 2) }}'
            sequence:
              - sequence: !input safety_2_point_conversion_actions
              - action: input_text.set_value
                data:
                  value: Safety / 2 Point Conversion
                target:
                  entity_id: !input score_input_text
              - delay: "00:00:30"
              - action: input_text.set_value
                target:
                  entity_id: !input score_input_text
                data:
                  value: None
          - conditions:
              - condition: template
                value_template: '{{ trigger.to_state.attributes.sport == "football" and (trigger.to_state.attributes.team_score | int - trigger.from_state.attributes.team_score | int == 3) }}'
            sequence:
              - sequence: !input field_goal_actions
              - action: input_text.set_value
                data:
                  value: Field Goal
                target:
                  entity_id: !input score_input_text
              - delay: "00:00:30"
              - action: input_text.set_value
                target:
                  entity_id: !input score_input_text
                data:
                  value: None
             # Handle All Other Scores
              - choose:
                  - conditions:
                      - condition: template
                        value_template: '{{ trigger.to_state.attributes.team_score | int != trigger.from_state.attributes.team_score | int }}'
                    sequence:
                       # Handle any type of score.
                      - sequence: !input scored_actions
                      - action: input_text.set_value
                        data:
                          value: Scored
                        target:
                          entity_id: !input score_input_text
                      - delay: "00:00:30"
                      - action: input_text.set_value
                        target:
                          entity_id: !input score_input_text
                        data:
                          value: None

mode: single
